#version 400
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout (binding = 0) uniform samplerCube tex_env_map;
layout (location = 0) in vec2 in_tc;
layout (location = 0) out vec4 out_cube_faces[6];

ivec3 face_swizzle[] = ivec3[] (
	ivec3(2, 1, 0), ivec3(2, 1, 0), ivec3(0, 2, 1), ivec3(0, 2, 1), ivec3(0, 1, 2), ivec3(0, 1, 2)
);
vec3 face_side[] = vec3[] (
	vec3(1, 1, -1), vec3(-1, 1, 1), vec3(-1, 1, 1), vec3(-1, -1, -1), vec3(-1, 1, -1), vec3(1, 1, 1)
);

#define PI 3.1415926535897932384626433832795

void main() {
	vec3 tc3 = vec3(in_tc, 1);
	for (int i = 0; i < out_cube_faces.length(); ++i) {
		ivec3 sw = face_swizzle[i];
		vec3 dir = normalize(vec3(tc3[sw.x] * face_side[i].x, tc3[sw.y] * face_side[i].y, tc3[sw.z] * face_side[i].z));
		vec3 up = vec3(0.0, 1.0, 0.0);
		vec3 right = normalize(cross(up, dir));
		up = cross(dir, right);
		const float TWO_PI = PI * 2.0;
		const float HALF_PI = PI * 0.5;
		const float delta_phi = TWO_PI / 180.0;
		const float delta_theta = HALF_PI / 64.0;
		vec3 irradiance = vec3(0.0);
		float sample_count = 0.0;
		for (float phi = 0.0; phi < TWO_PI; phi += delta_phi) {
			for (float theta = 0.0; theta < HALF_PI; theta += delta_theta) {
				vec3 tempVec = cos(phi) * right + sin(phi) * up;
				vec3 sampleVector = cos(theta) * dir + sin(theta) * tempVec;
				irradiance += texture(tex_env_map, sampleVector).rgb * cos(theta) * sin(theta);
				sample_count += 1.0;
			}
		}
		irradiance = PI * irradiance * (1.0 / sample_count);
		out_cube_faces[i] = vec4(irradiance, 1);
	}
}