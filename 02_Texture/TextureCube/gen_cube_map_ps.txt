#version 400
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout (binding = 0) uniform sampler2D tex_equirect;
layout (location = 0) in vec2 in_tc;
layout (location = 0) out vec4 out_cube_faces[6];

ivec3 face_swizzle[] = ivec3[] (
	ivec3(2, 1, 0), ivec3(2, 1, 0), ivec3(0, 2, 1), ivec3(0, 2, 1), ivec3(0, 1, 2), ivec3(0, 1, 2)
);
vec3 face_side[] = vec3[] (
	vec3(1, 1, 1), vec3(-1, 1, -1), vec3(-1, 1, -1), vec3(-1, -1, 1), vec3(-1, 1, 1), vec3(1, 1, -1)
);

vec2 dir_to_equirect(vec3 v) {
	const vec2 invAtan = vec2(0.1591, 0.3183);
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
    return vec2(1) - uv;
}

void main() {
	vec3 tc3 = vec3(in_tc, 1);
	for (int i = 0; i < out_cube_faces.length(); ++i) {
		ivec3 sw = face_swizzle[i];
		vec3 dir = normalize(vec3(tc3[sw.x] * face_side[i].x, tc3[sw.y] * face_side[i].y, tc3[sw.z] * face_side[i].z));
		//out_cube_faces[i] = vec4(dir * 0.5 + 0.5, 1);
		out_cube_faces[i] = texture(tex_equirect, dir_to_equirect(dir), 0);
		//if (i != 0) out_cube_faces[i].xyz *= 0.1;
	}
}