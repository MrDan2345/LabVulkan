#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout (triangles, cw) in;
layout (std140, binding = 0) uniform t_xf {
	mat4 w;
	mat4 vp;
    mat4 wvp;
} xf;
layout (location = 0) in vec4 in_color[];
layout (location = 1) in vec3 in_normal[];
layout (location = 0) out vec4 out_color;
void main(void) {
	gl_Position = (
		(gl_TessCoord.x * gl_in[0].gl_Position) +
		(gl_TessCoord.y * gl_in[1].gl_Position) +
		(gl_TessCoord.z * gl_in[2].gl_Position)
	);
	float pd[3] = {
		length(gl_Position - gl_in[0].gl_Position),
		length(gl_Position - gl_in[1].gl_Position),
		length(gl_Position - gl_in[2].gl_Position)
	};
	for (int i = 0; i < 3; ++i) {
		pd[i] = clamp(abs(0.5 - pd[i]) * 2, 0, 1);
	}
	//float d = (pd[0] + pd[1] + pd[2]) * (1.0 / 3.0);
	//float d = min(pd[0], min(pd[1], pd[2]));
	float d = max(pd[0], max(pd[1], pd[2])) * 12;
	vec3 n = normalize(gl_TessCoord.x * in_normal[0] + gl_TessCoord.y * in_normal[1] + gl_TessCoord.z * in_normal[2]);
	gl_Position.xyz += n * d;
	gl_Position = xf.wvp * gl_Position;
	out_color = (gl_TessCoord.x * in_color[0] + gl_TessCoord.y * in_color[1] + gl_TessCoord.z * in_color[2]);
}