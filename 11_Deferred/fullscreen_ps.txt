#version 400
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout (std140, binding = 0) uniform t_data {
  vec4 screen_size;
  vec4 rt_size;
  mat4 vp_i;
} data;
layout(binding = 1) uniform sampler2D tex_depth;
layout(binding = 2) uniform sampler2D tex_color;
layout(binding = 3) uniform sampler2D tex_normal;
layout (location = 0) in vec2 in_tc0;
layout (location = 0) out vec4 out_color;
void main() {
  float depth = texture(tex_depth, in_tc0).x;
  vec4 color = texture(tex_color, in_tc0);
  vec3 normal = normalize(texture(tex_normal, in_tc0).xyz);
  
  vec3 light_pos = vec3(1.2, 2, -3.6);
  float light_rad = 6;
  
  vec2 sc = gl_FragCoord.xy * data.screen_size.zw * 2 - 1;
  vec4 pos_s = vec4(sc, depth, 1);
  vec4 pos_w = data.vp_i * pos_s;
  pos_w *= (1 / pos_w.w);
  
  vec3 pos_to_light = light_pos - pos_w.xyz;
  float light_att = 1 - smoothstep(light_rad * 0.3, light_rad, length(pos_to_light));
  pos_to_light = normalize(pos_to_light);
  float light = dot(normal, pos_to_light) * light_att;
  out_color = color * light;//vec4(sc, 0, 1);//vec4(depth, depth, depth, 1);
  //out_color = vec4(normal, 1);
}