#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (triangles) in;
layout (triangle_strip, max_vertices = 12) out;

layout (std140, binding = 0) uniform t_xf {
	mat4 w;
	mat4 vp;
    mat4 wvp;
} xf;

layout (location = 0) in vec4 in_color[];
layout (location = 1) in vec4 in_pos_w[];

layout (location = 0) out vec4 out_color;

void MakeTri(vec4 a, vec4 b, vec4 c, vec4 col) {
	gl_Position = a;
	out_color = col;
	EmitVertex();
	gl_Position = b;
	out_color = col;
	EmitVertex();
	gl_Position = c;
	out_color = col;
	EmitVertex();
	EndPrimitive();
}

void main() {	
	float nl = 0.6;
	vec3 tp[3] = {
		in_pos_w[0].xyz,
		in_pos_w[1].xyz,
		in_pos_w[2].xyz
	};
	vec4 ci[3] = {
		vec4(vec3(1, 1, 1) - in_color[0].xyz, 1),
		vec4(vec3(1, 1, 1) - in_color[1].xyz, 1),
		vec4(vec3(1, 1, 1) - in_color[2].xyz, 1),
	};
	vec3 ctr = (tp[0] + tp[1] + tp[2]) * (1.0 / 3.0);
	vec3 nrm = normalize(cross(tp[2] - tp[0], tp[1] - tp[0]));
	
	vec4 pyr[4] = {
		xf.vp * vec4(tp[0] + nrm * nl, 1),
		xf.vp * vec4(tp[1] + nrm * nl, 1),
		xf.vp * vec4(tp[2] + nrm * nl, 1),
		xf.vp * vec4(ctr + nrm, 1)
	};
	
	MakeTri(pyr[0], pyr[2], pyr[1], vec4(1, 0, 0, 1));
	MakeTri(pyr[0], pyr[1], pyr[3], vec4(0, 1, 0, 1));
	MakeTri(pyr[1], pyr[2], pyr[3], vec4(0, 0, 1, 1));
	MakeTri(pyr[2], pyr[0], pyr[3], vec4(1, 1, 0, 1));
}