#version 400
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout (binding = 0) uniform samplerCube tex_env_map;
layout (location = 0) in vec2 in_tc;
layout (location = 0) out vec4 out_cube_faces[6];

ivec3 face_swizzle[] = ivec3[] (
	ivec3(2, 1, 0), ivec3(2, 1, 0), ivec3(0, 2, 1), ivec3(0, 2, 1), ivec3(0, 1, 2), ivec3(0, 1, 2)
);
vec3 face_side[] = vec3[] (
	vec3(1, 1, -1), vec3(-1, 1, 1), vec3(-1, 1, 1), vec3(-1, -1, -1), vec3(-1, 1, -1), vec3(1, 1, 1)
);

#define PI 3.1415926535897932384626433832795

layout (push_constant) uniform t_consts {
	layout (offset = 0) float roughness;
	layout (offset = 4) uint sample_count;
} consts;

float random(vec2 co)
{
	float a = 12.9898;
	float b = 78.233;
	float c = 43758.5453;
	float dt = dot(co.xy, vec2(a,b));
	float sn = mod(dt, 3.14);
	return fract(sin(sn) * c);
}

vec2 hammersley2d(uint i, uint N) {
	uint bits = (i << 16u) | (i >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	float rdi = float(bits) * 2.3283064365386963e-10;
	return vec2(float(i) /float(N), rdi);
}

vec3 importance_sample_GGX(vec2 Xi, float roughness, vec3 normal) {
	float alpha = roughness * roughness;
	float phi = 2.0 * PI * Xi.x + random(normal.xz) * 0.1;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha*alpha - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);

	vec3 up = abs(normal.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangentX = normalize(cross(up, normal));
	vec3 tangentY = normalize(cross(normal, tangentX));

	return normalize(tangentX * H.x + tangentY * H.y + normal * H.z);
}

float D_GGX(float dotNH, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
	return (alpha2)/(PI * denom*denom); 
}

vec3 prefilter_map(vec3 dir, float roughness, uint sample_count) {
	vec3 N = dir;
	vec3 V = dir;
	vec3 color = vec3(0.0);
	float totalWeight = 0.0;
	float envMapDim = float(textureSize(tex_env_map, 0).s);
	for(uint i = 0u; i < sample_count; i++) {
		vec2 Xi = hammersley2d(i, sample_count);
		vec3 H = importance_sample_GGX(Xi, roughness, N);
		vec3 L = 2.0 * dot(V, H) * H - V;
		float dotNL = clamp(dot(N, L), 0.0, 1.0);
		if(dotNL > 0.0) {
			float dotNH = clamp(dot(N, H), 0.0, 1.0);
			float dotVH = clamp(dot(V, H), 0.0, 1.0);

			// Probability Distribution Function
			float pdf = D_GGX(dotNH, roughness) * dotNH / (4.0 * dotVH) + 0.0001;
			// Slid angle of current smple
			float omegaS = 1.0 / (float(sample_count) * pdf);
			// Solid angle of 1 pixel across all cube faces
			float omegaP = 4.0 * PI / (6.0 * envMapDim * envMapDim);
			// Biased (+1.0) mip level for better result
			float mipLevel = roughness == 0.0 ? 0.0 : max(0.5 * log2(omegaS / omegaP) + 1.0, 0.0f);
			color += textureLod(tex_env_map, L, mipLevel).xyz * dotNL;
			totalWeight += dotNL;

		}
	}
	return (color / totalWeight);
}

void main() {
	vec3 tc3 = vec3(in_tc, 1);
	for (int i = 0; i < out_cube_faces.length(); ++i) {
		ivec3 sw = face_swizzle[i];
		vec3 dir = normalize(vec3(tc3[sw.x] * face_side[i].x, tc3[sw.y] * face_side[i].y, tc3[sw.z] * face_side[i].z));
		out_cube_faces[i] = vec4(prefilter_map(dir, consts.roughness, consts.sample_count), 1);
	}
}