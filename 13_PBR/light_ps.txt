#version 400
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_samplerless_texture_functions : enable
layout (std140, binding = 0) uniform t_data {
  mat4 vp_i;
  vec4 screen_ratio;
  vec4 camera_pos;
} data;
layout (binding = 1) uniform texture2D tex_color;
layout (binding = 2) uniform texture2D tex_depth;
layout (binding = 3) uniform texture2D tex_normal;
layout (binding = 4) uniform texture2D tex_phys_params;
layout (location = 0) out vec4 out_color;

const float PI = 3.14159265359;

vec3 material_color() {
	return vec3(0.9, 0.9, 0.9);
}

// Normal Distribution function --------------------------------------
float D_GGX(float dotNH, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
	return (alpha2)/(PI * denom*denom); 
}

// Geometric Shadowing function --------------------------------------
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	float GL = dotNL / (dotNL * (1.0 - k) + k);
	float GV = dotNV / (dotNV * (1.0 - k) + k);
	return GL * GV;
}

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(float cosTheta, float metallic)
{
	vec3 F0 = mix(vec3(0.04), material_color(), metallic); // * material.specular
	vec3 F = F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0); 
	return F;    
}

// Specular BRDF composition --------------------------------------------

vec3 BRDF(vec3 L, vec3 V, vec3 N, float metallic, float roughness)
{
	// Precalculate vectors and dot products	
	vec3 H = normalize (V + L);
	float dotNV = clamp(dot(N, V), 0.0, 1.0);
	float dotNL = clamp(dot(N, L), 0.0, 1.0);
	float dotLH = clamp(dot(L, H), 0.0, 1.0);
	float dotNH = clamp(dot(N, H), 0.0, 1.0);

	// Light color fixed
	vec3 lightColor = vec3(1.0);

	vec3 color = vec3(0.0);

	if (dotNL > 0.0)
	{
		float rroughness = max(0.05, roughness);
		// D = Normal distribution (Distribution of the microfacets)
		float D = D_GGX(dotNH, roughness); 
		// G = Geometric shadowing term (Microfacets shadowing)
		float G = G_SchlicksmithGGX(dotNL, dotNV, roughness);
		// F = Fresnel factor (Reflectance depending on angle of incidence)
		vec3 F = F_Schlick(dotNV, metallic);

		vec3 spec = D * F * G / (4.0 * dotNL * dotNV);

		color += spec * dotNL * lightColor;
	}

	return color;
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}  

vec4 get_world_pos(float depth) {
	vec2 sc = gl_FragCoord.xy * data.screen_ratio.zw;
	vec4 pos_s = vec4(sc * 2 - 1, depth, 1);
	vec4 pos_w = data.vp_i * pos_s;
	pos_w *= (1 / pos_w.w);
	return pos_w;
}

const float ld = 10;
vec4 lights[] = {
	vec4(-ld, ld * 0.8, ld, 5),
	vec4(ld, ld * 0.8, ld, 5),
	vec4(-ld, ld * 0.8, -ld, 5),
	vec4(ld, ld * 0.8, -ld, 5)
};

void main() {
	ivec2 sc = ivec2(gl_FragCoord.xy);
	vec3 albedo = texelFetch(tex_color, sc, 0).xyz;
	float depth = texelFetch(tex_depth, sc, 0).x;
	vec3 normal = normalize(texelFetch(tex_normal, sc, 0).xyz);
	vec2 phys_params = texelFetch(tex_phys_params, sc, 0).xy;
	float metallic = clamp(phys_params.x, 0.05, 0.95);
	float roughness = clamp(phys_params.y, 0.05, 0.95);
	vec4 pos_w = get_world_pos(depth);
	
	vec3 dir_to_camera = normalize(data.camera_pos.xyz - pos_w.xyz);
	vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);
	
	vec3 Lo = vec3(0.0);
	for (int i = 0; i < lights.length(); i++) {
		// calculate per-light radiance
        vec3 L = normalize(lights[i].xyz - pos_w.xyz);
        vec3 H = normalize(dir_to_camera + L);
        float distance = length(lights[i].xyz - pos_w.xyz);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = vec3(1.9, 1.9, 1.9) * attenuation;        
        
        // cook-torrance brdf
        float NDF = DistributionGGX(normal, H, roughness);        
        float G = GeometrySmith(normal, dir_to_camera, L, roughness);      
        vec3 F = fresnelSchlick(max(dot(H, dir_to_camera), 0.0), F0);       
        
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;	  
        
        vec3 numerator    = NDF * G * F;
        float denominator = 4.0 * max(dot(normal, dir_to_camera), 0.0) * max(dot(normal, L), 0.0);
        vec3 specular     = numerator / max(denominator, 0.001);  
            
        // add to outgoing radiance Lo
        float NdotL = max(dot(normal, L), 0.0);                
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;
	};
	vec3 ambient = vec3(0.0);//vec3(0.03) * albedo;
    vec3 color = ambient + Lo;
	
    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0 / 2.2));  
   
    out_color = vec4(color, 1.0);
}