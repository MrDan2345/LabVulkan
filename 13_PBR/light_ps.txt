#version 400
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_samplerless_texture_functions : enable
layout (std140, binding = 0) uniform t_data {
  mat4 vp_i;
  vec4 screen_ratio;
  vec4 camera_pos;
} data;
layout (binding = 1) uniform texture2D tex_color;
layout (binding = 2) uniform texture2D tex_depth;
layout (binding = 3) uniform texture2D tex_normal;
layout (binding = 4) uniform texture2D tex_phys_params;
layout (location = 0) out vec4 out_color;

const float PI = 3.14159265359;

vec3 material_color() {
	return vec3(0.9, 0.9, 0.9);
}

// Normal Distribution function --------------------------------------
float D_GGX(float dotNH, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
	return (alpha2)/(PI * denom*denom); 
}

// Geometric Shadowing function --------------------------------------
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	float GL = dotNL / (dotNL * (1.0 - k) + k);
	float GV = dotNV / (dotNV * (1.0 - k) + k);
	return GL * GV;
}

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(float cosTheta, float metallic)
{
	vec3 F0 = mix(vec3(0.04), material_color(), metallic); // * material.specular
	vec3 F = F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0); 
	return F;    
}

// Specular BRDF composition --------------------------------------------

vec3 BRDF(vec3 L, vec3 V, vec3 N, float metallic, float roughness)
{
	// Precalculate vectors and dot products	
	vec3 H = normalize (V + L);
	float dotNV = clamp(dot(N, V), 0.0, 1.0);
	float dotNL = clamp(dot(N, L), 0.0, 1.0);
	float dotLH = clamp(dot(L, H), 0.0, 1.0);
	float dotNH = clamp(dot(N, H), 0.0, 1.0);

	// Light color fixed
	vec3 lightColor = vec3(1.0);

	vec3 color = vec3(0.0);

	if (dotNL > 0.0)
	{
		float rroughness = max(0.05, roughness);
		// D = Normal distribution (Distribution of the microfacets)
		float D = D_GGX(dotNH, roughness); 
		// G = Geometric shadowing term (Microfacets shadowing)
		float G = G_SchlicksmithGGX(dotNL, dotNV, roughness);
		// F = Fresnel factor (Reflectance depending on angle of incidence)
		vec3 F = F_Schlick(dotNV, metallic);

		vec3 spec = D * F * G / (4.0 * dotNL * dotNV);

		color += spec * dotNL * lightColor;
	}

	return color;
}

vec4 get_world_pos(float depth) {
	vec2 sc = gl_FragCoord.xy * data.screen_ratio.zw;
	vec4 pos_s = vec4(sc * 2 - 1, depth, 1);
	vec4 pos_w = data.vp_i * pos_s;
	pos_w *= (1 / pos_w.w);
	return pos_w;
}

const float ld = 10;
vec4 lights[] = {
	vec4(-ld, ld * 0.8, ld, 5),
	vec4(ld, ld * 0.8, ld, 5),
	vec4(-ld, ld * 0.8, -ld, 5),
	vec4(ld, ld * 0.8, -ld, 5)
};

void main() {
	ivec2 sc = ivec2(gl_FragCoord.xy);
	vec4 color = texelFetch(tex_color, sc, 0);
	float depth = texelFetch(tex_depth, sc, 0).x;
	vec3 normal = normalize(texelFetch(tex_normal, sc, 0).xyz);
	vec2 phys_params = texelFetch(tex_phys_params, sc, 0).xy;
	float metallic = phys_params.x;
	float roughness = phys_params.y;
	vec4 pos_w = get_world_pos(depth);
	
	vec3 dir_to_camera = normalize(data.camera_pos.xyz - pos_w.xyz);
	
	vec3 lo = vec3(0.0);
	float amb = 0.0;
	for (int i = 0; i < lights.length(); i++) {
		vec3 dir_to_light = lights[i].xyz - pos_w.xyz;
		amb += (1.0 - smoothstep(0.0, lights[i].w, length(dir_to_light)));
		dir_to_light = normalize(dir_to_light);
		lo += BRDF(dir_to_light, dir_to_camera, normal, metallic, roughness);
	};
	
	//out_color.xyz = vec3(0.0);
	out_color.xyz = material_color() * (0.02 * clamp(amb, 0, 1));
	out_color.xyz += lo;

	out_color.xyz = pow(out_color.xyz, vec3(0.7));
	out_color.w = 1;
}