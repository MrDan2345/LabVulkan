#version 400
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_samplerless_texture_functions : enable
layout (std140, binding = 0) uniform t_data {
  mat4 vp_i;
  vec4 screen_ratio;
  vec4 camera_pos;
  float exposure;
  float gamma;
} data;
layout (binding = 1) uniform texture2D tex_color;
layout (binding = 2) uniform texture2D tex_depth;
layout (binding = 3) uniform texture2D tex_normal;
layout (binding = 4) uniform texture2D tex_phys_params;
layout (binding = 5) uniform samplerCube tex_irradiance;
layout (binding = 6) uniform samplerCube tex_prefiltered;
layout (binding = 7) uniform sampler2D tex_brdf_lut;
layout (location = 0) out vec4 out_color;

const float PI = 3.14159265359;

vec3 Uncharted2Tonemap(vec3 x)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

// Normal Distribution function --------------------------------------
float D_GGX(float dotNH, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
	return (alpha2)/(PI * denom*denom); 
}

// Geometric Shadowing function --------------------------------------
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	float GL = dotNL / (dotNL * (1.0 - k) + k);
	float GV = dotNV / (dotNV * (1.0 - k) + k);
	return GL * GV;
}

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
vec3 F_SchlickR(float cosTheta, vec3 F0, float roughness)
{
	return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 prefilteredReflection(vec3 R, float roughness)
{
	const float MAX_REFLECTION_LOD = 9.0; // todo: param/const
	float lod = roughness * MAX_REFLECTION_LOD;
	float lodf = floor(lod);
	float lodc = ceil(lod);
	vec3 a = textureLod(tex_prefiltered, R, lodf).rgb;
	vec3 b = textureLod(tex_prefiltered, R, lodc).rgb;
	return mix(a, b, lod - lodf);
}

vec4 get_world_pos(float depth) {
	vec2 sc = gl_FragCoord.xy * data.screen_ratio.zw;
	vec4 pos_s = vec4(sc * 2 - 1, depth, 1);
	vec4 pos_w = data.vp_i * pos_s;
	pos_w *= (1 / pos_w.w);
	return pos_w;
}

void main() {
	ivec2 sc = ivec2(gl_FragCoord.xy);
	vec3 albedo = texelFetch(tex_color, sc, 0).xyz;
	float depth = texelFetch(tex_depth, sc, 0).x;
	vec3 normal = normalize(texelFetch(tex_normal, sc, 0).xyz);
	vec2 phys_params = texelFetch(tex_phys_params, sc, 0).xy;
	float metallic = clamp(phys_params.x, 0.05, 0.95);
	float roughness = clamp(phys_params.y, 0.05, 0.95);
	vec4 pos_w = get_world_pos(depth);
	
	vec3 dir_to_camera = normalize(data.camera_pos.xyz - pos_w.xyz);
	vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);
	
	vec3 Lo = vec3(0.0);
	
	vec3 N = normal;
	vec3 V = dir_to_camera;
	vec3 R = reflect(-V, N);
	
	vec2 brdf = texture(tex_brdf_lut, vec2(max(dot(N, V), 0.0), roughness)).xy;
	vec3 reflection = prefilteredReflection(R, roughness).xyz;	
	vec3 irradiance = texture(tex_irradiance, N).xyz;
	
	vec3 diffuse = irradiance * albedo;	

	vec3 F = F_SchlickR(max(dot(N, V), 0.0), F0, roughness);

	// Specular reflectance
	vec3 specular = reflection * (F * brdf.x + brdf.y);

	// Ambient part
	vec3 kD = 1.0 - F;
	kD *= 1.0 - metallic;	  
	vec3 ambient = (kD * diffuse + specular);
	
	vec3 color = ambient + Lo;

	color = mix(color, textureLod(tex_prefiltered, -dir_to_camera, 0).xyz, step(0.99, depth));
	
	// Tone mapping
	//color = Uncharted2Tonemap(color * data.exposure);
	//color = color * (1.0f / Uncharted2Tonemap(vec3(11.2f)));	
	// Gamma correction
	color = pow(color, vec3(1.0f / data.gamma));
   
    out_color = vec4(color, 1.0);
}