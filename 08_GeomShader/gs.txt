#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (triangles) in;
layout (line_strip, max_vertices = 8) out;

layout (std140, binding = 0) uniform t_xf {
	mat4 w;
	mat4 vp;
    mat4 wvp;
} xf;

layout (location = 0) in vec4 in_color[];
layout (location = 1) in vec4 in_pos_w[];

layout (location = 0) out vec4 out_color;

void main() {	
	float nl = 0.02;
	vec3 tp[3] = {
		in_pos_w[0].xyz,
		in_pos_w[1].xyz,
		in_pos_w[2].xyz
	};
	vec4 ci[3] = {
		vec4(vec3(1, 1, 1) - in_color[0].xyz, 1),
		vec4(vec3(1, 1, 1) - in_color[1].xyz, 1),
		vec4(vec3(1, 1, 1) - in_color[2].xyz, 1),
	};
	vec3 ctr = (tp[0] + tp[1] + tp[2]) * (1.0 / 3.0);
	vec3 nrm = normalize(cross(tp[2] - tp[0], tp[1] - tp[0]));
	//Face edges
	for (int i = 0; i < 3; ++i) {
		int j = (i + 1) % 3;
		gl_Position = xf.vp * vec4(tp[i] + nrm * nl, 1.0);
		out_color = ci[i];
		EmitVertex();
		gl_Position = xf.vp * vec4(tp[j] + nrm * nl, 1.0);
		out_color = ci[j];
		EmitVertex();
		EndPrimitive();
	}
	//Face normal
	gl_Position = xf.vp * vec4(ctr, 1.0);
	out_color = vec4(1, 0, 0, 1);
	EmitVertex();
	gl_Position = xf.vp * vec4(ctr + nrm, 1.0);
	out_color = vec4(0, 1, 0, 1);
	EmitVertex();
	EndPrimitive();
}