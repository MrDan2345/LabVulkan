#version 400
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_samplerless_texture_functions : enable
layout (std140, binding = 0) uniform t_data {
  mat4 vp_i;
  mat4 vp_light;
  vec4 screen_ratio;
  vec4 camera_pos;
  vec4 light_dir;
  vec4 light_color;
} data;
layout (binding = 1) uniform texture2D tex_color;
layout (binding = 2) uniform texture2D tex_depth;
layout (binding = 3) uniform texture2D tex_normal;
layout (binding = 4) uniform texture2D tex_material;
layout (binding = 5) uniform sampler2D tex_light_depth;
layout (location = 0) out vec4 out_color;

vec4 get_world_pos(float depth) {
	vec2 sc = gl_FragCoord.xy * data.screen_ratio.zw;
	vec4 pos_s = vec4(sc * 2 - 1, depth, 1);
	vec4 pos_w = data.vp_i * pos_s;
	pos_w *= (1 / pos_w.w);
	return pos_w;
}

void main() {
	vec2 sc = gl_FragCoord.xy * data.screen_ratio.zw;
	ivec2 tc = ivec2(gl_FragCoord.xy);
	
	float depth = texelFetch(tex_depth, tc, 0).x;
	vec4 color = texelFetch(tex_color, tc, 0);
	vec3 normal = normalize(texelFetch(tex_normal, tc, 0).xyz);
	
	vec4 pos_w = get_world_pos(depth);
	vec4 pos_light = data.vp_light * pos_w;
	pos_light.xyz /= pos_light.w;
	pos_light.xy = pos_light.xy * 0.5 + 0.5;
	float depth_light = texture(tex_light_depth, pos_light.xy, 0).x + 0.001;
	float shadow = step(pos_light.z, depth_light);
	out_color = vec4(vec3(dot(normal, -data.light_dir.xyz) * shadow) * data.light_color.xyz * color.xyz, 1);
}